#Generated Form Function
function GenerateForm {
########################################################################
# Code Modified BY: Ben Smith version  v1.0.10.1 SYN
# Added Disable Lync module by: Albert Suseno
# Added Out of Office Message and Forward to Managers Email address Module by: Albert Suseno
# Updated to point to Exchange 2016 powershell - Albert Suseno - April 2020
# Fixed Remove Groups: Albert Suseno
# I have modified GUI so it is a Multi-Run App
# Allowing Continuous Use without closure.
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition)
# Generated On: 2014-02-17 09:30
# Generated By: Jean-Sebastien Elie

#Importing AD Module
Import-Module ActiveDirectory

#Importing Exchange PS 2010 Module
$ExchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://aubdcexch01.cardno.corp/PowerShell/ -Authentication Kerberos
Import-PSSession $ExchangeSession

#Importing O365 Cloud Module
if (@(Get-PSSession | where {$_.ComputerName.ToString() -like "*outlook.com"}).count -lt 1) {
    # get cloud credentials
    Write-Host "Please enter your Office 365 Administrator credentials" -ForegroundColor Yellow
    $cloudCredential=Get-Credential

    # create a session to exchange online (No longer required as 2FA bypass this)
    write-Host "Make sure to authenticate via 2FA PowerShell Online first..."
    #Write-Host "Connecting PowerShell session to Exchange Online..."
    #$cloudSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $CloudCredential -Authentication Basic -AllowRedirection -WarningAction SilentlyContinue

    # import the session
    #Write-Host "Importing commandlets for Exchange Online PowerShell session with a `"Cloud`" prefix"
    #Import-PSSession $cloudSession -Prefix Cloud
	
	#Connect to MS Online Service for Licensing
	Import-Module MSOnline
    Connect-MsolService -Credential $CloudCredential
}
	
#Add-PSSnapin Microsoft.Exchange.Management.PowerShell.E2010
########################################################################

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
#endregion

#region Generated Form Objects
$form1 = New-Object System.Windows.Forms.Form
$brefresh = New-Object System.Windows.Forms.Button
$bremovemanager = New-Object System.Windows.Forms.Button
$bremovegroups = New-Object System.Windows.Forms.Button
$bremovevoicemail = New-Object System.Windows.Forms.Button
$bterminateuser  = New-Object System.Windows.Forms.Button
$bremoveexchangelicense = New-Object System.Windows.Forms.Button
$brsetoutofoffice = New-Object System.Windows.Forms.Button
$bEnableStepByStep = New-Object System.Windows.Forms.Button
$bDisableStepByStep = New-Object System.Windows.Forms.Button
#$bremovelync = New-Object System.Windows.Forms.Button
$Lstatus = New-Object System.Windows.Forms.TextBox
$Cuser = New-Object System.Windows.Forms.ComboBox

$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.

$brefresh_OnClick= 
{
$form1.text = "Locking up...Please wait till unlock"
$brefresh.text = "Please Wait.."
$brefresh.enabled = $False
$global:arrac = get-aduser -SearchBase "OU=1_Terminated Users,OU=APA,OU=Cardno,DC=cardno,DC=corp" -Filter * | sort-object
 #job END

foreach($user in $global:arrac)
                {
                    $Cuser.items.add($user.SamAccountName)
                }
$brefresh.text = "Refresh"
$brefresh.enabled = $true
$bterminateuser.Visible = $true
$bEnableStepByStep.Visible = $true
$form1.text = "User Termination - Cardno"
}

$bEnableStepByStep_OnClick=
{
$form1.Size = New-Object System.Drawing.Size (700, 190)
#$form1.Size.Width = 700
#$form1.Size.Height = 190
$brsetoutofoffice.Visible = $true
$bremovemanager.Visible = $true
$bremovegroups.Visible = $true
$bremovevoicemail.Visible = $true
$bremoveexchangelicense.Visible = $true
$bEnableStepByStep.Visible = $false
$bDisableStepByStep.Visible = $true
#$bremovelync.Visible = $true

}

$bDisableStepByStep_OnClick=
{
$form1.Size = New-Object System.Drawing.Size (520, 190)
#$form1.Size.Width = 520
#$form1.Size.Height = 190
$brsetoutofoffice.Visible = $false
$bremovemanager.Visible = $false
$bremovegroups.Visible = $false
$bremovevoicemail.Visible = $false
#$bremoveexchangelicense.Visible = $false
$bEnableStepByStep.Visible = $true
$bDisableStepByStep.Visible = $false
#$bremovelync.Visible = $false

}

$bremovemanager_OnClick= 
{
	SetOutOfOffice
	RemoveManager
}#close function

$bremovegroups_OnClick=
{
	RemoveGroup
}

$bremovevoicemail_OnClick=
{
	RemoveVoicemail
}

$brsetoutofoffice_OnClick=
{
	SetOutOfOffice
}

$bterminateuser_OnClick=
{
    SetOutOfOffice
    RemoveGroup
	RemoveVoicemail
#	RemoveExchangeLicenses
    RemoveManager
#	RemoveLync					Removed due to lack of access to run this function. User must be an RTCUniversalUserAdmin to run Get-CsUser command
	$form1.Text = "User Termination - Cardno"
}

#$bremoveexchangelicense_OnClick=
#{
#	RemoveExchangeLicenses
#}

$bremovelync_OnClick=
{
	RemoveLync
}




#-------------------------------------------------------------------------------
# Module Functions
#-------------------------------------------------------------------------------
function RemoveManager()
{
if ($Cuser.SelectedIndex -eq -1) {
    $Lstatus.Text = "No User Selected" 
} else {
    Try
        {
        $UPN =  $Cuser.SelectedItem.ToString()
        $suser = $Cuser.SelectedItem.ToString()
		$fuser = get-aduser -filter {SamAccountName -like $suser}
		$semail = $fuser.UserPrincipalName
		$form1.text = "Please Wait..."
		$brefresh.enabled = $false

#		Remove Manager from AD User
#		Get Manager Name and mailbox displayname

		$result = Set-ADUser $suser -clear manager

#		Refresh Form
		$form1.text = "User Termination - Cardno"
		$brefresh.enabled = $true
		$Lstatus.Text = $result + "`r`n" + $Lstatus.Text
		$Lstatus.Text = $suser + " has had their out of office enabled" 		
		$Lstatus.Text = $suser + " has had their manager $emanagername removed." + "`r`n" + $Lstatus.Text
		
    } Catch {
        $Lstatus.Text = $_.Exception.Message.ToString() + "`r`n" + $Lstatus.Text 
    }
    

    } #close first if
}



#Remove Groups from User
function RemoveGroup(){
if ($Cuser.SelectedIndex -eq -1) {
    $Lstatus.Text = "No User Selected" 
} else {
    Try
        {
        $UPN =  $Cuser.SelectedItem.ToString()
        $suser = $Cuser.SelectedItem.ToString()
		$form1.text = "Please Wait..."
		$brefresh.enabled = $false
		

		#Backup Groups
		Get-ADPrincipalGroupMembership -Identity $suser -Server AUBDCCDC01.cardno.corp | where {$_.Name -ne "Domain Users"} | export-csv -Notypeinformation c:\scripts\logs\group-$suser.csv
		
		$ADgroups = Get-ADPrincipalGroupMembership -Identity $suser -Server AUBDCCDC01.cardno.corp  | where {$_.Name -ne "Domain Users"}		
		Foreach($principalGroup in $ADgroups)
		{
			Remove-ADPrincipalGroupMembership -Identity $suser -Server AUBDCCDC01.cardno.corp  -MemberOf $ADgroups -Confirm:$false
		}
		

		
		$form1.text = "User Termination - Cardno"
		$brefresh.enabled = $true
		$Lstatus.Text = $result + "`r`n" + $Lstatus.Text
		$Lstatus.Text = $suser + " has had their groups removed" + "`r`n" + $Lstatus.Text
    } Catch {
        $Lstatus.Text = $_.Exception.Message.ToString() + "`r`n" + $Lstatus.Text
    }
    

    } #close first if
}

function RemoveVoicemail(){
if ($Cuser.SelectedIndex -eq -1) {
    $Lstatus.Text = "No User Selected" 
} else {
    Try
        {
        $UPN =  $Cuser.SelectedItem.ToString()
        $suser = $Cuser.SelectedItem.ToString()
		$fuser = get-aduser -filter {SamAccountName -like $suser}
		$semail = $fuser.UserPrincipalName
#		$result = $semail
		$form1.text = "Please Wait...Disabling VoiceMail"
		$brefresh.enabled = $false

#disable unified messaging
		$emailbox = get-UMMailbox -Identity $semail
		$eext = $emailbox.Extensions
		disable-UMMailbox -Identity $semail -confirm:$false
		$form1.text = "User Termination - Cardno"
		$brefresh.enabled = $true
		$Lstatus.Text = $result + $Lstatus.Text
		$Lstatus.Text = $suser + " has had their Voicemail on extension $eext Disabled"  + "`r`n" + $Lstatus.Text 
    } Catch {
        $Lstatus.Text = $_.Exception.Message.ToString() + "`r`n" + $Lstatus.Text 
    }
    

    } #close first if
}


function SetOutOfOffice(){
if ($Cuser.SelectedIndex -eq -1) {
    $Lstatus.Text = "No User Selected" 
} else {
    Try
        {
        $UPN =  $Cuser.SelectedItem.ToString()
        $suser = $Cuser.SelectedItem.ToString()
		$fuser = get-aduser -filter {SamAccountName -like $suser}
		$semail = $fuser.UserPrincipalName
		#$result = $semail
		$form1.text = "Please Wait...Setting Out Of Office"
		$brefresh.enabled = $false

#Set Out Of Office and Forward it to Managers Email address
		$emailbox = Get-RemoteMailbox -Identity $semail
        $emaildisplayname = (Get-RemoteMailbox -Identity $semail | select-object displayname).DisplayName

		$emanager = Get-ADUser $suser -Properties Manager | Select-Object Name, @{n="ManagerName";e={(Get-ADUser -Identity $_.Manager -properties DisplayName).DisplayName}}
		$ManagerName = $emanager.ManagerName
        $ManagerEmailAddr = Get-ADUser $suser -Properties Manager | Select-Object Name, @{n="ManagerEmail";e={(Get-ADUser -Identity $_.Manager -properties EmailAddress).EmailAddress}}
		$ManagerEmail = $ManagerEmailAddr.ManagerEmail



        #If the user has no Manager then set different Out of Office Message
        if ($ManagerName -eq $null) {
		Add-Type -AssemblyName Microsoft.VisualBasic
        $entermanagername = [Microsoft.VisualBasic.Interaction]::InputBox("Managers Name", "Please Enter the Managers Name:")
        $entermanageremail = [Microsoft.VisualBasic.Interaction]::InputBox("Managers Email", "Please Enter the Managers Email Address:")
        $ExternalMsg = "Hi, Thank you for your email, Please note that I am no longer with Cardno. For any future correspondence, please contact " + $entermanagername + " on " + $entermanageremail + " Best Regards, " + $emaildisplayname
        $InternalMsg = "Hi, Thank you for your email, Please note that I am no longer with Cardno. For any future correspondence, please contact " + $entermanagername + " on " + $entermanageremail + " Best Regards, " + $emaildisplayname
        set-Mailbox -Identity $semail -DeliverToMailboxAndForward $true -ForwardingAddress $entermanageremail
		}  else {
        $ExternalMsg = "Hi, Thank you for your email, Please note that I am no longer with Cardno. For any future correspondence, please contact " + $ManagerName + " on " + $ManagerEmail + " Best Regards, " + $emaildisplayname
        $InternalMsg = "Hi, Thank you for your email, Please note that I am no longer with Cardno. For any future correspondence, please contact " + $ManagerName + " on " + $ManagerEmail + " Best Regards, " + $emaildisplayname
		set-Mailbox -Identity $semail -DeliverToMailboxAndForward $true -ForwardingAddress $ManagerEmail
        }


        set-MailboxAutoReplyConfiguration -Identity $semail -AutoReplyState Enabled -ExternalMessage $ExternalMsg -InternalMessage $InternalMsg
        $form1.text = "User Termination - Cardno"
		$brefresh.enabled = $true
		$Lstatus.Text = $result + $Lstatus.Text
		$Lstatus.Text = $suser + " has had their out of office enabled" 
    } Catch {
        $Lstatus.Text = $_.Exception.Message.ToString() + "`r`n" + $Lstatus.Text 
    }
    

    } #close first if
}


function RemoveExchangeLicenses(){
if ($Cuser.SelectedIndex -eq -1) {
    $Lstatus.Text = "No User Selected" 
} else {
    Try
        {
        $UPN =  $Cuser.SelectedItem.ToString()
        $suser = $Cuser.SelectedItem.ToString()
		$euser = $suser + "@cardno.com.au"
		$Lstatus.Text = $euser + "`r`n" + $Lstatus.Text
		$form1.text = "Please Wait..."
		$brefresh.enabled = $false
		$userLicenceTest = (Get-MsolUser -UserPrincipalName $euser).Licenses
		if($userLicenceTest){
			if($userLicenceTest.Count -gt 0){
				foreach ($i in $userLicenceTest){
					if ($i.AccountSkuID -eq "CARDNO1:ENTERPRISEPACK"){
						Set-MsolUserLicense -UserPrincipalName $euser -RemoveLicenses $i.AccountSkuID
						$Lstatus.Text = "E3 Licence has been removed"  + "`r`n" + $Lstatus.Text 

					}
					elseif($i.AccountSkuID -eq "CARDNO1:DESKLESSPACK"){
						Set-MsolUserLicense -UserPrincipalName $euser -RemoveLicenses $i.AccountSkuID
						$Lstatus.Text = "K1 Licence has been removed"  + "`r`n" + $Lstatus.Text 
					}
					else{
						$Lstatus.Text = $i.AccountSkuID + "has been removed" + "`r`n" + $Lstatus.Text 
						Set-MsolUserLicense -UserPrincipalName $euser -RemoveLicenses $i.AccountSkuID
					}
				}
			}
		}else{
			$Lstatus.Text = $suser + "No Licences Assigned"  + "`r`n" + $Lstatus.Text 
		}
		
		$form1.text = "User Termination - Cardno"
		$brefresh.enabled = $true
		$Lstatus.Text = $result + "`r`n" + $Lstatus.Text
    } Catch {
        $Lstatus.Text = $_.Exception.Message.ToString() + "`r`n" + $Lstatus.Text
    }
    

    } #close first if
}

#Removed due to lack of access to run this function. User must be an RTCUniversalUserAdmin to run Get-CsUser command
#function RemoveLync(){
#if ($Cuser.SelectedIndex -eq -1) {
#    $Lstatus.Text = "No User Selected" 
#} else {
#    Try
#        {
#		#Import Lync		
#		Import-Module Lync
#        $UPN =  $Cuser.SelectedItem.ToString()
#        $suser = $Cuser.SelectedItem.ToString()
#		$fuser = get-aduser -filter {SamAccountName -like $suser}
#		$semail = $fuser.UserPrincipalName
#		$form1.text = "Please Wait..."
#		$date = get-date -format dd-MM-yy_mmss
#		get-csuser -identity rhys.thomson | select-object sipaddress,lineuri | export-csv -Notypeinformation C:\scripts\logs\lineuri.log
#		Disable-CSuser -identity rhys.thomson
#		$brefresh.enabled = $false
#		$Lstatus.Text = $suser + " has had Lync Disabled. Please allow 30 mins for replication."  + "`r`n" + $Lstatus.Text
#    } Catch {
#        $Lstatus.Text = $_.Exception.Message.ToString() + "`r`n" + $Lstatus.Text
#    }
#} #close first if
#}

$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
	$form1.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code

$brefresh.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 10
$brefresh.Location = $System_Drawing_Point
$brefresh.Name = "brefresh"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 110
$brefresh.Size = $System_Drawing_Size
$brefresh.TabIndex = 0
$brefresh.Text = "Refresh"
$brefresh.UseVisualStyleBackColor = $True
$brefresh.Visible = $true
$brefresh.add_Click($brefresh_OnClick)
$form1.Controls.Add($brefresh)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 40
$bEnableStepByStep.Location = $System_Drawing_Point
$bEnableStepByStep.Name = "bEnableStepByStep"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 110
$bEnableStepByStep.Size = $System_Drawing_Size
$bEnableStepByStep.TabIndex = 0
$bEnableStepByStep.Text = "Advanced Mode"
$bEnableStepByStep.UseVisualStyleBackColor = $True
$bEnableStepByStep.Visible = $false
$bEnableStepByStep.add_Click($bEnableStepByStep_OnClick)
$form1.Controls.Add($bEnableStepByStep)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 40
$bDisableStepByStep.Location = $System_Drawing_Point
$bDisableStepByStep.Name = "bDisableStepByStep"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 110
$bDisableStepByStep.Size = $System_Drawing_Size
$bDisableStepByStep.TabIndex = 0
$bDisableStepByStep.Text = "Simple Mode"
$bDisableStepByStep.UseVisualStyleBackColor = $True
$bDisableStepByStep.Visible = $false
$bDisableStepByStep.add_Click($bDisableStepByStep_OnClick)
$form1.Controls.Add($bDisableStepByStep)

$Cuser.AutoCompleteMode = 3
$Cuser.AutoCompleteSource = 256
$Cuser.DataBindings.DefaultDataSourceUpdateMode = 0
$Cuser.FormattingEnabled = $True
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 130
$System_Drawing_Point.Y = 10
$Cuser.Location = $System_Drawing_Point
$Cuser.Name = "Cuser"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 240
$Cuser.Size = $System_Drawing_Size
$Cuser.TabIndex = 1
$form1.Controls.Add($Cuser)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 530
$System_Drawing_Point.Y = 10
$bremovemanager.Location = $System_Drawing_Point
$bremovemanager.Name = "bremovemanager"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 130
$bremovemanager.Size = $System_Drawing_Size
$bremovemanager.TabIndex = 2
$bremovemanager.Text = "1. Remove Manager"
$bremovemanager.UseVisualStyleBackColor = $True
$bremovemanager.Visible = $false
$bremovemanager.add_Click($bremovemanager_OnClick)
$form1.Controls.Add($bremovemanager)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 530
$System_Drawing_Point.Y = 40
$bremovegroups.Location = $System_Drawing_Point
$bremovegroups.Name = "bremovegroups"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 130
$bremovegroups.Size = $System_Drawing_Size
$bremovegroups.TabIndex = 3
$bremovegroups.Text = "2. Remove Groups"
$bremovegroups.UseVisualStyleBackColor = $True
$bremovegroups.Visible = $false
$bremovegroups.add_Click($bremovegroups_OnClick)
$form1.Controls.Add($bremovegroups)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 530
$System_Drawing_Point.Y = 70
$bremovevoicemail.Location = $System_Drawing_Point
$bremovevoicemail.Name = "bremovevoicemail"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 130
$bremovevoicemail.Size = $System_Drawing_Size
$bremovevoicemail.TabIndex = 4
$bremovevoicemail.Text = "3. Remove VM"
$bremovevoicemail.UseVisualStyleBackColor = $True
$bremovevoicemail.Visible = $false
$bremovevoicemail.add_Click($bremovevoicemail_OnClick)
$form1.Controls.Add($bremovevoicemail)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 530
$System_Drawing_Point.Y = 100
$bremoveexchangelicense.Location = $System_Drawing_Point
$bremoveexchangelicense.Name = "bremoveexchangelicense"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 130
$bremoveexchangelicense.Size = $System_Drawing_Size
$bremoveexchangelicense.TabIndex = 5
$bremoveexchangelicense.Text = "4. Remove Exchange"
$bremoveexchangelicense.UseVisualStyleBackColor = $True
$bremoveexchangelicense.Visible = $false
$bremoveexchangelicense.add_Click($bremoveexchangelicense_OnClick)
$form1.Controls.Add($bremoveexchangelicense)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 530
$System_Drawing_Point.Y = 130
$brsetoutofoffice.Location = $System_Drawing_Point
$brsetoutofoffice.Name = "brsetoutofoffice"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 130
$brsetoutofoffice.Size = $System_Drawing_Size
$brsetoutofoffice.TabIndex = 6
$brsetoutofoffice.Text = "5. Set OutOfOffice"
$brsetoutofoffice.UseVisualStyleBackColor = $True
$brsetoutofoffice.Visible = $false
$brsetoutofoffice.add_Click($brsetoutofoffice_OnClick)
$form1.Controls.Add($brsetoutofoffice)


#$System_Drawing_Point = New-Object System.Drawing.Point
#$System_Drawing_Point.X = 530
#$System_Drawing_Point.Y = 130
#$bremovelync.Location = $System_Drawing_Point
#$bremovelync.Name = "bremovelync"
#$System_Drawing_Size = New-Object System.Drawing.Size
#$System_Drawing_Size.Height = 20
#$System_Drawing_Size.Width = 130
#$bremovelync.Size = $System_Drawing_Size
#$bremovelync.TabIndex = 6
#$bremovelync.Text = "5. Remove Lync"
#$bremovelync.UseVisualStyleBackColor = $True
#$bremovelync.Visible = $false
#$bremovelync.add_Click($bremovelync_OnClick)
#$form1.Controls.Add($bremovelync)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 380
$System_Drawing_Point.Y = 10
$bterminateuser.Location = $System_Drawing_Point
$bterminateuser.Name = "bterminateuser"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 130
$bterminateuser.Size = $System_Drawing_Size
$bterminateuser.TabIndex = 1
$bterminateuser.Text = "Terminate User"
$bterminateuser.UseVisualStyleBackColor = $True
$bterminateuser.Visible = $false
$bterminateuser.add_Click($bterminateuser_OnClick)
$form1.Controls.Add($bterminateuser)

$Lstatus.DataBindings.DefaultDataSourceUpdateMode = 0

#Status Window
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 70
$Lstatus.Location = $System_Drawing_Point
$Lstatus.Name = "label2"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 100
$System_Drawing_Size.Width = 500
$Lstatus.Size = $System_Drawing_Size
$Lstatus.TabIndex = 7
$lstatus.AutoSize = $true
$Lstatus.Text = "Status"
$Lstatus.BorderStyle = 2
$lstatus.ScrollBars = "Vertical"
$lstatus.Multiline = $true
$form1.Controls.Add($Lstatus)

#Form Size
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 180
$System_Drawing_Size.Width = 520
$form1.ClientSize = $System_Drawing_Size
$form1.minimumSize = $System_Drawing_Size
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$form1.Name = "form1"
$form1.AutoSizeMode = GrowAndShrink
$form1.AutoSize = $true
$form1.text = "User Termination - Cardno"




##

#

#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)

#Connect to Cloud Exchange	(No longer required as 2FA bypass this)
	#$cloudCredential=Get-Credential
	#$cloudSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $CloudCredential -Authentication Basic -AllowRedirection -WarningAction SilentlyContinue
	#Import-PSSession $cloudSession -Prefix Cloud

#Connect to MS Online Service
	Import-Module MSOnline
    Connect-MsolService -Credential $CloudCredential


#Show the Form
$form1.ShowDialog()| Out-Null

} #End Function

#Call the Function

GenerateForm
